// =========================
// üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase & Cloudinary
// =========================

// --- ‚ÄºÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚ÄºÔ∏è ---
const firebaseConfig = {
  apiKey: "AIzaSyCad3vMEdmWQUcUDJA6BHYD6AZruzgqom4",
  authDomain: "testdirt-58ba4.firebaseapp.com",
  projectId: "testdirt-58ba4",
  storageBucket: "testdirt-58ba4.firebasestorage.app",
  messagingSenderId: "89792009820",
  appId: "1:89792009820:web:86ff41e9d3211f00997899"
};

const CLOUDINARY_URL = "https://api.cloudinary.com/v1_1/dfix1lo9q/image/upload";
const CLOUDINARY_UPLOAD_PRESET = "soil_test_uploads";

// =========================
// ÔøΩ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
// =========================

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
let farmerData = {};

// =========================
// ÔøΩüïê ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
// =========================

function getCurrentDate() {
  // 1) Query parameter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ?testDate=2025-09-10
  const params = new URLSearchParams(location.search);
  if (params.has('testDate')) {
    const testDate = new Date(params.get('testDate') + 'T00:00:00');
    if (!isNaN(testDate)) {
      console.log('üß™ ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testDate.toLocaleDateString('th-TH'));
      return testDate;
    }
  }

  // 2) Override ‡∏ú‡πà‡∏≤‡∏ô window variable: window.__debugDate = '2025-09-10'
  if (window.__debugDate) {
    const debugDate = new Date(window.__debugDate + 'T00:00:00');
    if (!isNaN(debugDate)) {
      console.log('üîß ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà debug:', debugDate.toLocaleDateString('th-TH'));
      return debugDate;
    }
  }

  // 3) ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (force refresh)
  const now = new Date();
  return new Date(now.getTime());
}

function shouldHideFarmerSection(testDate = null) {
  const now = testDate || getCurrentDate();
  const year = now.getFullYear();
  const month = now.getMonth() + 1; // 1-12
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô 2025 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
  const shouldHide = (year > 2025) || (year === 2025 && month >= 11);
  
  console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${now.toLocaleDateString('th-TH')} (${year}-${month})`);
  console.log(`üë®‚Äçüåæ ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£: ${shouldHide}`);
  
  return shouldHide;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü
function shouldShowBeanYieldSection(testDate = null) {
  const now = testDate || getCurrentDate();
  const year = now.getFullYear();
  const month = now.getMonth() + 1; // 1-12
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2025 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
  const shouldShow = (year > 2025) || (year === 2025 && month >= 12);
  
  console.log(`‚òï ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü: ${shouldShow}`);
  
  return shouldShow;
}

// =========================
// üë®‚Äçüåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
// =========================

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
function saveFarmerData() {
  const farmerFields = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  farmerFields.forEach(fieldId => {
    const el = document.getElementById(fieldId);
    if (el && el.value !== '') {
      farmerData[fieldId] = el.value;
    }
  });
  
  console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£:', farmerData);
}

// Global cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
let farmerDataCache = null;
let farmerDataLoaded = false;

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (Optimized)
function getFarmerData(fieldId) {
  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å memory cache ‡∏Å‡πà‡∏≠‡∏ô
  if (farmerData[fieldId] && farmerData[fieldId] !== '') {
    return farmerData[fieldId];
  }
  
  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database cache
  if (farmerDataCache && farmerDataCache[fieldId]) {
    return farmerDataCache[fieldId];
  }
  
  return '';
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Optimized)
function getFarmerNumber(fieldId) {
  const value = getFarmerData(fieldId);
  if (!value || value === '') return null;
  const parsed = Number(value);
  if (isNaN(parsed)) return null;
  
  const positiveOnlyFields = ['age', 'coffee_experience', 'planting_area', 'fertilizer_frequency', 
                             'fertilizer_amount', 'yield_per_tree', 'fertilizer_cost', 'labor_cost', 'other_costs'];
  if (positiveOnlyFields.includes(fieldId) && parsed < 0) {
    return null;
  }
  return parsed;
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
async function loadFarmerDataFromDatabase() {
  // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏µ cache ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
  if (farmerDataLoaded && farmerDataCache) {
    console.log('üìã ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache');
    return true;
  }

  const mountain = document.getElementById('mountain')?.value;
  const plotNumber = document.getElementById('plot_number')?.value;
  
  if (!mountain || !plotNumber) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    farmerDataLoaded = true;
    farmerDataCache = {};
    return false;
  }
  
  console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á:', { mountain, plotNumber });
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
    const querySnapshot = await db.collection("soil_tests_new")
      .where('mountain', '==', mountain)
      .where('plot_number', '==', plotNumber)
      .where('coffee_tree', '==', '1')
      .orderBy('createdAt', 'desc')
      .limit(5) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      .get();
    
    console.log('üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', querySnapshot.empty ? '‡πÑ‡∏°‡πà‡∏û‡∏ö' : `‡∏û‡∏ö ${querySnapshot.docs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
    let foundData = null;
    if (!querySnapshot.empty) {
      for (const doc of querySnapshot.docs) {
        const data = doc.data();
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (data.farmer_name && data.age && data.address) {
          foundData = data;
          console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1');
          break;
        }
      }
    }
    
    if (foundData) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï farmerData ‡πÅ‡∏•‡∏∞ cache
      const farmerFields = [
        'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
        'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
        'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
        'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
        'labor_cost', 'other_costs'
      ];
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á cache ‡πÉ‡∏´‡∏°‡πà
      farmerDataCache = {};
      farmerFields.forEach(fieldId => {
        if (foundData[fieldId] !== undefined && foundData[fieldId] !== null && foundData[fieldId] !== '') {
          farmerData[fieldId] = foundData[fieldId];
          farmerDataCache[fieldId] = foundData[fieldId];
        }
      });
      
      farmerDataLoaded = true;
      console.log('üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï farmerData ‡πÅ‡∏•‡∏∞ cache ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return true;
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1');
      farmerDataLoaded = true;
      farmerDataCache = {};
      return false;
    }
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    farmerDataLoaded = true;
    farmerDataCache = {};
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å console)
// =========================
// üå± ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü
// =========================

window.refreshBeanYieldSectionStatus = function() {
  const beanYieldSection = document.getElementById('bean_yield_section');
  const showBeanYield = shouldShowBeanYieldSection();
  
  if (beanYieldSection) {
    const beanYieldRequiredEls = beanYieldSection.querySelectorAll('input, select');
    
    if (showBeanYield) {
      beanYieldSection.style.display = '';
      // ‡∏Ñ‡∏∑‡∏ô required attributes ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      beanYieldRequiredEls.forEach(el => {
        if (el.dataset.wasRequired === 'true') {
          el.setAttribute('required', '');
        }
        el.disabled = false;
      });
    } else {
      beanYieldSection.style.display = 'none';
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤ required attributes ‡∏≠‡∏≠‡∏Å
      beanYieldRequiredEls.forEach(el => {
        if (el.hasAttribute('required')) {
          el.dataset.wasRequired = 'true';
        }
        el.removeAttribute('required');
        el.disabled = true;
      });
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô
      beanYieldRequiredEls.forEach(el => {
        if (el.type === 'number') {
          el.value = '';
        } else if (el.tagName === 'SELECT') {
          el.selectedIndex = 0;
        }
      });
    }
  }
};

window.refreshFarmerSectionStatus = function() {
  const hideByDate = shouldHideFarmerSection();
  window.NO_FARMER_SECTION = hideByDate;
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const section = document.getElementById('farmer_section');
  const coffeeSelect = document.getElementById('coffee_tree');
  
  if (section) {
    if (hideByDate) {
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏´‡∏ô)
      section.style.display = 'none';
      section.querySelectorAll('[required]').forEach(el => {
        el.removeAttribute('required');
        el.disabled = true;
      });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü
      if (coffeeSelect && coffeeSelect.value === '1') {
        section.style.display = '';
        section.querySelectorAll('input, select, textarea').forEach(el => {
          if (!el.hasAttribute('data-locked')) {
            el.disabled = false;
          }
          // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ required ‡∏ï‡∏≤‡∏° original attribute
          if (el.dataset.originalRequired === 'true') {
            el.setAttribute('required', '');
          }
        });
      } else if (coffeeSelect && ['2','3','4','5','6'].includes(coffeeSelect.value)) {
        section.style.display = 'none';
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
        section.style.display = '';
        section.querySelectorAll('input, select, textarea').forEach(el => {
          if (!el.hasAttribute('data-locked')) {
            el.disabled = false;
          }
          if (el.dataset.originalRequired === 'true') {
            el.setAttribute('required', '');
          }
        });
      }
    }
  }
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü
  window.refreshBeanYieldSectionStatus();
  
  console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', hideByDate);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å console)
window.testDate = function(dateString) {
  console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateString}`);
  window.__debugDate = dateString;
  window.refreshFarmerSectionStatus();
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
window.resetDate = function() {
  console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á');
  delete window.__debugDate;
  const url = new URL(window.location);
  url.searchParams.delete('testDate');
  window.history.replaceState({}, '', url);
  window.refreshFarmerSectionStatus();
};

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ---
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();


// =========================
// üìé ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
// =========================

// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
const selectedFiles = [];
const selectedFileKeys = new Set();
function addToSelectedFiles(fileList){
  Array.from(fileList || []).forEach(f => {
    const key = `${f.name}|${f.size}|${f.lastModified}`;
    if (!selectedFileKeys.has(key)) {
      selectedFileKeys.add(key);
      selectedFiles.push(f);
    }
  });
}

function createFileInput() {
  const row = document.createElement("div");
  row.classList.add("file-row");

  const input = document.createElement("input");
  input.type = "file";
  input.name = "mediaFiles[]";
  input.accept = ".jpg,.jpeg,.png";
  input.multiple = true;
  
  // ‡∏ã‡πà‡∏≠‡∏ô input element
  input.style.display = "none";
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö file label ‡πÅ‡∏•‡∏∞ preview
  const fileContainer = document.createElement("div");
  fileContainer.classList.add("file-container");
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
  const fileLabel = document.createElement("div");
  fileLabel.classList.add("file-label", "select-button");
  fileLabel.textContent = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå";
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å label ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î file dialog
  fileLabel.addEventListener("click", () => {
    input.click();
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
  const previewContainer = document.createElement("div");
  previewContainer.classList.add("file-preview-container");
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
  input.addEventListener("change", () => {
    addToSelectedFiles(input.files);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô label
    updateFileLabel(input.files, fileLabel);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    displaySelectedImages(input.files, previewContainer);
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    input.value = "";
  });

  const removeBtn = document.createElement("button");
  removeBtn.type = "button";
  removeBtn.textContent = "‡∏•‡∏ö";
  removeBtn.classList.add("remove-btn");
  removeBtn.addEventListener("click", () => row.remove());

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° element ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö: input ‡∏ã‡πà‡∏≠‡∏ô, file container (‡∏ã‡πâ‡∏≤‡∏¢), ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö (‡∏Ç‡∏ß‡∏≤)
  fileContainer.appendChild(fileLabel);
  fileContainer.appendChild(previewContainer);
  
  row.appendChild(input);
  row.appendChild(fileContainer);
  row.appendChild(removeBtn);
  
  return row;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô label
function updateFileLabel(fileList, label) {
  const files = Array.from(fileList || []);
  
  if (files.length === 0) {
    label.textContent = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå";
    label.className = "file-label select-button";
  } else if (files.length === 1) {
    label.textContent = files[0].name;
    label.className = "file-label selected";
  } else {
    label.textContent = `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß ${files.length} ‡πÑ‡∏ü‡∏•‡πå`;
    label.className = "file-label selected";
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
function displaySelectedImages(fileList, container) {
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°
  container.innerHTML = '';
  
  Array.from(fileList || []).forEach(file => {
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (file.type.startsWith('image/')) {
      const imgContainer = document.createElement("div");
      imgContainer.classList.add("image-preview");
      
      const img = document.createElement("img");
      
      const reader = new FileReader();
      reader.onload = function(e) {
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
      
      imgContainer.appendChild(img);
      container.appendChild(imgContainer);
    }
  });
}

document.getElementById("addFileBtn").addEventListener("click", () => {
  document.getElementById("fileInputs").appendChild(createFileInput());
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° input ‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
(function ensureInitialFileInput(){
  const wrap = document.getElementById("fileInputs");
  if (wrap && !wrap.querySelector("input[type='file']")) {
    wrap.appendChild(createFileInput());
  }
})();

// =========================
/*  üßæ Submit Form:
    1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ Cloudinary
    2) ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
*/
// =========================

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
let isSaving = false;

document.getElementById("soilForm").addEventListener("submit", async function (e) {
  e.preventDefault();
  
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
  if (isSaving) {
    console.log('üö´ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà...');
    return;
  }
  
  isSaving = true;
  const saveBtn = e.target.querySelector(".btn-save");
  const originalText = saveBtn.textContent;
  saveBtn.disabled = true;

  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...";

    // --- 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ---
    let filesToUpload = selectedFiles.slice();
    if (filesToUpload.length === 0) {
      const fileInputs = document.querySelectorAll("input[name='mediaFiles[]']");
      fileInputs.forEach(input => Array.from(input.files || []).forEach(file => filesToUpload.push(file)));
    }

    let fileURLs = [];
    if (filesToUpload.length > 0) {
      const uploadPromises = filesToUpload.map(file => {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("upload_preset", CLOUDINARY_UPLOAD_PRESET);
        return fetch(CLOUDINARY_URL, { method: "POST", body: formData }).then(res => res.json());
      });

      const uploadedResponses = await Promise.all(uploadPromises);
      fileURLs = uploadedResponses
        .filter(res => res && res.secure_url)
        .map(res => res.secure_url);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";

    // --- 2) ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ) ---
    const value = id => {
      const el = document.getElementById(id);
      // ‡∏ñ‡πâ‡∏≤ element ‡∏ñ‡∏π‡∏Å disabled ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      if (!el || el.disabled) return '';
      return el.value ?? '';
    };

    const num = id => {
      const el = document.getElementById(id);
      // ‡∏ñ‡πâ‡∏≤ element ‡∏ñ‡∏π‡∏Å disabled ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null
      if (!el || el.disabled) return null;
      
      const v = el.value;
      if (v === '' || v === null || v === undefined) return null;
      const parsed = Number(v);
      if (isNaN(parsed)) return null;
      const positiveOnlyFields = ['age', 'coffee_experience', 'planting_area', 'fertilizer_frequency', 
                                 'fertilizer_amount', 'yield_per_tree', 'fertilizer_cost', 'labor_cost', 
                                 'other_costs', 'coffee_height', 'coffee_circumference', 'fresh_weight', 'dry_weight'];
      if (positiveOnlyFields.includes(id) && parsed < 0) {
        return null;
      }
      return parsed;
    };

    // *** OPTIMIZED: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á formData ***
    saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£...";
    await loadFarmerDataFromDatabase();
    
    saveBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...";

    const formDataForFirebase = {
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á
      mountain: value("mountain"),
      plot_number: value("plot_number"),
      coffee_tree: value("coffee_tree"),

      // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà optimize ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà async)
      farmer_name: getFarmerData("farmer_name"),
      age: getFarmerNumber("age"),
      coffee_experience: getFarmerNumber("coffee_experience"),
      planting_area: getFarmerNumber("planting_area"),
      address: getFarmerData("address"),
      gps_coordinates: getFarmerData("gps_coordinates"),
      water_system: getFarmerData("water_system"),
      fertilizer_type: getFarmerData("fertilizer_type"),
      fertilizer_formula: getFarmerData("fertilizer_formula"),
      fertilizer_frequency: getFarmerNumber("fertilizer_frequency"),
      fertilizer_amount: getFarmerNumber("fertilizer_amount"),
      soil_problems: getFarmerData("soil_problems"),
      yield_problems: getFarmerData("yield_problems"),
      internet_access: getFarmerData("internet_access"),
      yield_per_tree: getFarmerNumber("yield_per_tree"),
      cupping_experience: getFarmerData("cupping_experience"),
      fertilizer_cost: getFarmerNumber("fertilizer_cost"),
      labor_cost: getFarmerNumber("labor_cost"),
      other_costs: getFarmerNumber("other_costs"),

      // ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤
      n_portable: num("n_portable"),
      ph_portable: num("ph_portable"),
      p_portable: num("p_portable"),
      om_portable: num("om_portable"),
      k_portable: num("k_portable"),
      moisture_portable: num("moisture_portable"),
      ec_portable: num("ec_portable"),
      temp_portable: num("temp_portable"),

      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
      coffee_height: num("coffee_height"),
      coffee_circumference: num("coffee_circumference"),
      flowering: value("flowering"),
      fruiting: value("fruiting"),
      disease_problem: value("disease_problem"),
      insect_problem: value("insect_problem"),
      worm_problem: value("worm_problem"),

      // ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2025)
      fresh_weight: num("fresh_weight"),
      dry_weight: num("dry_weight"),
      bean_quality: value("bean_quality"),

      // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
      files: fileURLs,

      // ‡πÄ‡∏°‡∏ï‡∏≤
      createdAt: new Date()
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validationErrors = validateFormData(formDataForFirebase);
    if (validationErrors.length > 0) {
      alert('‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n' + validationErrors.join('\n'));
      saveBtn.disabled = false;
      saveBtn.textContent = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      return;
    }

    // --- 3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore ---
    // ‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await db.collection("soil_tests_new").add(formDataForFirebase);
    
  alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
  // ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ home
  window.location.href = "home.html";
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    
    // ‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ";
    if (error.code) {
      errorMessage += `\n‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.code}`;
    }
    if (error.message) {
      errorMessage += `\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}`;
    }
    
    alert(errorMessage);
  } finally {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    isSaving = false;
    saveBtn.disabled = false;
    saveBtn.textContent = originalText;
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
    farmerDataLoaded = false;
    farmerDataCache = null;
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
function validateFormData(data) {
  const errors = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö
  const positiveFields = {
    'age': '‡∏≠‡∏≤‡∏¢‡∏∏',
    'coffee_experience': '‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏•‡∏π‡∏Å‡∏Å‡∏≤‡πÅ‡∏ü',
    'planting_area': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å',
    'fertilizer_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏∏‡πã‡∏¢',
    'labor_cost': '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô',
    'other_costs': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
    'coffee_height': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏ô',
    'coffee_circumference': '‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏ß‡∏á'
  };
  
  Object.keys(positiveFields).forEach(field => {
    if (data[field] !== null && data[field] < 0) {
      errors.push(`${positiveFields[field]} ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö`);
    }
  });
  
  return errors;
}


// =========================
// üß≠ Google Map + Geolocation
// =========================

let map;
let marker;
const defaultPosition = { lat: 19.0333, lng: 99.8333 }; // ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≥‡∏£‡∏≠‡∏á)

function initMap(startPosOverride) {
  const gpsInput = document.getElementById('gps_coordinates');
  const existingCoords = gpsInput.value.split(',').map(Number);

  const startPosition =
    startPosOverride
      ? startPosOverride
      : (existingCoords.length === 2 && !isNaN(existingCoords[0]) && !isNaN(existingCoords[1]))
        ? { lat: existingCoords[0], lng: existingCoords[1] }
        : defaultPosition;

  map = new google.maps.Map(document.getElementById("map"), {
    zoom: 13,
    center: startPosition,
  });

  marker = new google.maps.Marker({
    position: startPosition,
    map: map,
    draggable: true
  });

  map.addListener("click", (e) => {
    marker.setPosition(e.latLng);
  });
}

// ‡πÉ‡∏´‡πâ callback=initMap ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Google Maps ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏à‡∏≠
window.initMap = initMap;

// ‡∏ï‡∏£‡∏ß‡∏à permission ‡∏Ç‡∏≠‡∏á geolocation (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÑ‡∏î‡πâ 'granted' | 'prompt' | 'denied')
const ensureGeoPermission = async () => {
  try {
    if (!('permissions' in navigator) || !('geolocation' in navigator)) return 'unsupported';
    const status = await navigator.permissions.query({ name: 'geolocation' });
    return status.state;
  } catch {
    return 'unknown';
  }
};

const showGeoHint = (state) => {
  const hintId = 'geo-hint';
  let hint = document.getElementById(hintId);
  if (!hint) {
    hint = document.createElement('div');
    hint.id = hintId;
    hint.style.margin = '0 0 10px';
    hint.style.color = '#5a4a37';
    hint.style.fontSize = '0.95rem';
    const modalContent = document.querySelector('#mapModal .modal-content');
    if (modalContent) modalContent.prepend(hint);
  }
  if (state === 'denied') {
    hint.innerHTML = '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ß‡πâ ‚Äî ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‚Üí Site settings ‚Üí Location: <b>Allow</b> ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤';
  } else if (state === 'unsupported') {
    hint.textContent = '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö geolocation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ô‡∏ö‡∏ô HTTPS/localhost';
  } else if (state === 'unknown') {
    hint.textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)';
  } else {
    hint.textContent = '';
  }
};


// =========================
// üß© UI: Modal ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á + ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + auto-format ‡∏õ‡∏∏‡πã‡∏¢
// =========================

document.addEventListener('DOMContentLoaded', function() {
  // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
  const modal = document.getElementById('mapModal');
  const mapBtn = document.getElementById('mapBtn');
  const closeBtn = document.querySelector('.close-btn');
  const confirmBtn = document.getElementById('confirmLocationBtn');
  const gpsInput = document.getElementById('gps_coordinates');
  const locateMeBtn = document.getElementById('locateMeBtn'); // ‡∏õ‡∏∏‡πà‡∏° üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  // --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ---
  mapBtn.onclick = async function() {
    modal.style.display = "block";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ permission ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const state = await ensureGeoPermission();
    showGeoHint(state);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡πâ‡∏ß init/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    const startWithGeo = () => {
      if (!navigator.geolocation) {
        if (!map) initMap();
        return;
      }
      const options = { enableHighAccuracy: false, timeout: 8000, maximumAge: 300000 };
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const current = { lat: pos.coords.latitude, lng: pos.coords.longitude };
          if (map) {
            map.setCenter(current);
            marker.setPosition(current);
          } else {
            initMap(current);
          }
        },
        (_err) => {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò/‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí fallback ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
          showGeoHint('denied');
          if (!map) initMap();
        },
        options
      );
    };

    // ‡∏ñ‡πâ‡∏≤ Google Maps ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ geolocation
    if (typeof google === 'object' && typeof google.maps === 'object') {
      if (!map) startWithGeo();
      else google.maps.event.trigger(map, "resize");
    } else {
      // ‡∏£‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      setTimeout(() => {
        if (!map && typeof google === 'object' && typeof google.maps === 'object') {
          startWithGeo();
        }
      }, 300);
    }
  };

  // --- ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---
  if (locateMeBtn) {
    locateMeBtn.onclick = function() {
      if (!navigator.geolocation) {
        alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
        return;
      }
      locateMeBtn.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...";
      locateMeBtn.disabled = true;

      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const current = { lat: pos.coords.latitude, lng: pos.coords.longitude };
          if (map && marker) {
            map.setCenter(current);
            marker.setPosition(current);
          } else if (typeof google === 'object' && typeof google.maps === 'object') {
            initMap(current);
          }
          locateMeBtn.textContent = "üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô";
          locateMeBtn.disabled = false;
        },
        (err) => {
          alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: " + err.message);
          locateMeBtn.textContent = "üìç ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô";
          locateMeBtn.disabled = false;
        },
        { enableHighAccuracy: true, timeout: 8000, maximumAge: 300000 }
      );
    };
  }

  // --- ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î ---
  confirmBtn.onclick = function() {
    if (!marker) return;
    const currentPos = marker.getPosition();
    gpsInput.value = `${currentPos.lat().toFixed(6)}, ${currentPos.lng().toFixed(6)}`;
    modal.style.display = "none";
  };

  // --- ‡∏õ‡∏¥‡∏î modal ---
  closeBtn.onclick = function() {
    modal.style.display = "none";
  };
  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  };

  // --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç" ‡∏ï‡∏≤‡∏°‡∏î‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
  const mountainSelect = document.getElementById('mountain');
  const plotSelect = document.getElementById('plot_number');
  const coffeeTreeSelectInit = document.getElementById('coffee_tree');
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á
  if (coffeeTreeSelectInit) {
    coffeeTreeSelectInit.disabled = true;
    coffeeTreeSelectInit.selectedIndex = 0; // ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå placeholder
  }

  mountainSelect.addEventListener('change', function() {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏≠‡∏¢
    farmerDataLoaded = false;
    farmerDataCache = null;
    farmerData = {};
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï options ‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
    if (!this.value) {
      plotSelect.innerHTML = '<option value="" disabled selected>-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô --</option>';
      plotSelect.disabled = true;
    } else {
      plotSelect.innerHTML = '<option value="" disabled selected>-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á --</option>';
      plotSelect.disabled = false; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏î‡∏≠‡∏¢
    }
    const selectedMountain = this.value;

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏≠‡∏¢ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏Å‡πà‡∏≠‡∏ô
    if (coffeeTreeSelectInit) {
      coffeeTreeSelectInit.disabled = true;
      coffeeTreeSelectInit.innerHTML = '<option value="" disabled selected>-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô --</option>' +
        '<option value="1">1</option>' +
        '<option value="2">2</option>' +
        '<option value="3">3</option>' +
        '<option value="4">4</option>' +
        '<option value="5">5</option>' +
        '<option value="6">6</option>';
    }

    if (selectedMountain === '‡∏î‡∏≠‡∏¢‡∏ä‡πâ‡∏≤‡∏á') {
      for (let i = 1; i <= 50; i++) {
        const option = document.createElement('option');
        option.value = `DC${i}`;
        option.textContent = `DC${i}`;
        plotSelect.appendChild(option);
      }
    } else if (selectedMountain === '‡∏î‡∏≠‡∏¢‡πÅ‡∏°‡πà‡∏™‡∏•‡∏≠‡∏á') {
      for (let i = 1; i <= 50; i++) {
        const option = document.createElement('option');
        option.value = `MSL${i}`;
        option.textContent = `MSL${i}`;
        plotSelect.appendChild(option);
      }
    }
  });

  // --- Auto-format: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏∏‡πã‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà (‡πÄ‡∏ä‡πà‡∏ô 15-15-15) ---
  const fertInput = document.getElementById('fertilizer_formula');
  if (fertInput) {
    fertInput.addEventListener('input', function() {
      let val = this.value.replace(/[^0-9]/g, ''); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      if (val.length > 1 && val.length <= 3) {
        val = val.slice(0, 2) + '-' + val.slice(2);
      } else if (val.length > 3 && val.length <= 5) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4);
      } else if (val.length > 5) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4, 6);
      }
      this.value = val;
    });

    // ‡∏Å‡∏±‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 15-15-15
    fertInput.addEventListener('keypress', function(e) {
      const raw = this.value.replace(/[^0-9]/g, '');
      if (raw.length >= 6 && /[0-9]/.test(e.key)) {
        e.preventDefault();
      }
    });

    // ‡∏ß‡∏≤‡∏á (paste) ‡∏Å‡πá‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    fertInput.addEventListener('paste', (e) => {
      e.preventDefault();
      const text = (e.clipboardData || window.clipboardData).getData('text');
      const digits = (text || '').replace(/[^0-9]/g, '').slice(0, 6);
      let val = digits;
      if (val.length > 2 && val.length <= 4) {
        val = val.slice(0, 2) + '-' + val.slice(2);
      } else if (val.length > 4) {
        val = val.slice(0, 2) + '-' + val.slice(2, 4) + '-' + val.slice(4);
      }
      fertInput.value = val;
    });
  }
});

// ---------- Prefill "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏î‡∏≠‡∏¢ + ‡πÅ‡∏õ‡∏•‡∏á ----------
function setVal(id, v){ 
  const el = document.getElementById(id);
  if(!el) return;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å
  let valueToSet = v ?? '';
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  if (typeof v === 'number' && !isNaN(v)) {
    const positiveOnlyFields = ['age', 'coffee_experience', 'planting_area', 'fertilizer_frequency', 
                               'fertilizer_amount', 'yield_per_tree', 'fertilizer_cost', 'labor_cost', 
                               'other_costs', 'coffee_height', 'coffee_circumference'];
    
    if (positiveOnlyFields.includes(id) && v < 0) {
      valueToSet = ''; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    } else {
      valueToSet = v.toString();
    }
  }
  
  if (el.tagName === 'SELECT') {
    el.value = valueToSet;
  } else {
    el.value = valueToSet;
  }
}

async function prefillFarmerSection() {
  const mountain = document.getElementById('mountain')?.value;
  const plot = document.getElementById('plot_number')?.value;
  const coffeeTree = document.getElementById('coffee_tree')?.value;

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ
  if (!mountain || !plot || !coffeeTree) {
    clearFormFields();
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏° (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ)
  const hideByDate = shouldHideFarmerSection();
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 (‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£) ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á + ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
  if (coffeeTree !== '1') {
    clearFormFields();
    unlockAllFields();
    return;
  }

  // ‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á ‡∏Å.‡∏¢. 2025)
  const fallbackQuery = async () => {
    const fb = await db.collection('soil_tests_new')
      .where('mountain','==', mountain)
      .where('plot_number','==', plot)
      .where('coffee_tree','==', coffeeTree)
      .get();
    const docs = [];
    fb.forEach(d => docs.push({id:d.id, ...d.data()}));
    if (!docs.length) return null;
    docs.sort((a,b)=>{
      const ta = a.createdAt?.seconds ? a.createdAt.seconds*1000 : (a.createdAt ? new Date(a.createdAt).getTime() : 0);
      const tb = b.createdAt?.seconds ? b.createdAt.seconds*1000 : (b.createdAt ? new Date(b.createdAt).getTime() : 0);
      return tb - ta;
    });
    return docs[0];
  };

  try {
    const snap = await db.collection('soil_tests_new')
      .where('mountain','==', mountain)
      .where('plot_number','==', plot)
      .where('coffee_tree','==', coffeeTree)
      .orderBy('createdAt','desc')
      .limit(1)
      .get();

    let data = null;
    if (!snap.empty) data = snap.docs[0].data();
    else data = await fallbackQuery();

    if (!data) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ
      unlockAllFields();
      return;
    }
    await fillFormFromDoc(data);
  } catch (err) {
    if (err?.code === 'failed-precondition') {
      const data = await fallbackQuery();
      if (data) await fillFormFromDoc(data); else unlockAllFields();
    } else {
      console.warn('prefill error:', err);
      unlockAllFields();
    }
  }
}

async function fillFormFromDoc(d){
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏°
  const hideByDate = shouldHideFarmerSection();
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏Å.‡∏¢. 2025 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
  if (hideByDate && (!d.farmer_name || !d.age || !d.address)) {
    console.log('üîç ‡∏´‡∏•‡∏±‡∏á ‡∏Å.‡∏¢. 2025 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤');
    const mountain = document.getElementById('mountain')?.value;
    const plot = document.getElementById('plot_number')?.value;
    
    if (mountain && plot) {
      try {
        let primarySnap = null;
        try {
          primarySnap = await db.collection('soil_tests_new')
            .where('mountain','==', mountain)
            .where('plot_number','==', plot)
            .where('coffee_tree','==', '1')
            .orderBy('createdAt','desc')
            .get();
        } catch(err) {
          // fallback query
          const fb = await db.collection('soil_tests_new')
            .where('mountain','==', mountain)
            .where('plot_number','==', plot)
            .where('coffee_tree','==', '1')
            .get();
          const docs = [];
          fb.forEach(doc => docs.push({id:doc.id, ...doc.data()}));
          if (docs.length) {
            docs.sort((a,b)=>{
              const ta = a.createdAt?.seconds ? a.createdAt.seconds*1000 : (a.createdAt ? new Date(a.createdAt).getTime() : 0);
              const tb = b.createdAt?.seconds ? b.createdAt.seconds*1000 : (b.createdAt ? new Date(b.createdAt).getTime() : 0);
              return tb - ta;
            });
            primarySnap = { empty:false, docs:docs.map(doc => ({data:()=>doc})) };
          }
        }
        
        // ‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
        if (primarySnap && !primarySnap.empty) {
          for (const doc of primarySnap.docs) {
            const candidateData = doc.data();
            if (candidateData.farmer_name && candidateData.age && candidateData.address) {
              console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤');
              // ‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              const farmerKeys = [
                'farmer_name','age','coffee_experience','planting_area','address',
                'water_system','fertilizer_type','fertilizer_formula','fertilizer_frequency',
                'fertilizer_amount','soil_problems','yield_problems','internet_access',
                'yield_per_tree','cupping_experience','fertilizer_cost','labor_cost','other_costs','gps_coordinates'
              ];
              farmerKeys.forEach(key => {
                if (!d[key] && candidateData[key]) {
                  d[key] = candidateData[key];
                }
              });
              break;
            }
          }
        }
      } catch(err) {
        console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ:', err);
      }
    }
  }

  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
  const fieldsToLock = hideByDate ? [] : [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  setVal('farmer_name', d.farmer_name);
  setVal('age', d.age);
  setVal('coffee_experience', d.coffee_experience);
  setVal('planting_area', d.planting_area);
  setVal('address', d.address);
  setVal('gps_coordinates', d.gps_coordinates);
  setVal('water_system', d.water_system);
  setVal('fertilizer_type', d.fertilizer_type);
  setVal('fertilizer_formula', d.fertilizer_formula);
  setVal('fertilizer_frequency', d.fertilizer_frequency);
  setVal('fertilizer_amount', d.fertilizer_amount);
  setVal('soil_problems', d.soil_problems);
  setVal('yield_problems', d.yield_problems);
  setVal('internet_access', d.internet_access);
  setVal('yield_per_tree', d.yield_per_tree);
  setVal('cupping_experience', d.cupping_experience);
  setVal('fertilizer_cost', d.fertilizer_cost);
  setVal('labor_cost', d.labor_cost);
  setVal('other_costs', d.other_costs);

  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡∏≤‡πÅ‡∏ü (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2025)
  // ‡πÑ‡∏°‡πà prefill ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const shouldShowBean = shouldShowBeanYieldSection();
  if (!shouldShowBean) {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ prefill ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    setVal('fresh_weight', d.fresh_weight);
    setVal('dry_weight', d.dry_weight);
    setVal('bean_quality', d.bean_quality);
  }
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà prefill ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà

  // ‡∏•‡πá‡∏≠‡∏Ñ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ
  fieldsToLock.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.disabled = true;
      element.parentElement.classList.add('locked-field');
    }
  });

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ GPS ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ
  const mapBtn = document.getElementById('mapBtn');
  if (mapBtn) {
    mapBtn.style.display = 'none';
  }
}

function unlockAllFields() {
  const fieldsToUnlock = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  fieldsToUnlock.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.disabled = false;
      element.parentElement.classList.remove('locked-field');
    }
  });
}

function clearFormFields() {
  const fieldsToClear = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ
  fieldsToClear.forEach(fieldId => {
    const element = document.getElementById(fieldId);
    if (element) {
      element.value = '';
      element.disabled = false;
      element.parentElement.classList.remove('locked-field');
    }
  });

  // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  const mapBtn = document.getElementById('mapBtn');
  if (mapBtn) {
    mapBtn.style.display = 'inline-block';
  }
}

// hook: ‡πÉ‡∏´‡πâ prefill ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á
document.addEventListener('DOMContentLoaded', () => {
  // ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ ‡∏ã‡πà‡∏≠‡∏ô/‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£
  (function handleFarmerSectionByDate(){
    const disableFarmer = shouldHideFarmerSection();
    window.NO_FARMER_SECTION = disableFarmer;
    
    if (!disableFarmer) return; // ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025 ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
    
    const section = document.getElementById('farmer_section');
    if (section) {
      section.style.display = 'none';
      // ‡πÄ‡∏≠‡∏≤ required ‡∏≠‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
      section.querySelectorAll('[required]').forEach(el => el.removeAttribute('required'));
    }
  })();

  const mountainSelect = document.getElementById('mountain');
  const plotSelect = document.getElementById('plot_number');
  const coffeeTreeSelect = document.getElementById('coffee_tree');

  mountainSelect.addEventListener('change', function() {
    clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏≠‡∏¢
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏ï‡∏≤‡∏°‡∏î‡∏≠‡∏¢ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    // ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ plot ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏•‡∏≠‡∏á prefill ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    setTimeout(prefillFarmerSection, 0);
  });

  plotSelect.addEventListener('change', prefillFarmerSection);
  coffeeTreeSelect.addEventListener('change', prefillFarmerSection);

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
  plotSelect.addEventListener('change', function() {
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  farmerDataLoaded = false;
  farmerDataCache = null;
  farmerData = {};
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠)
  clearFormFields();
  unlockAllFields();
    if (this.value) {
      coffeeTreeSelect.disabled = false;
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï placeholder ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô
      if (!coffeeTreeSelect.value) {
        const firstOpt = coffeeTreeSelect.querySelector('option[disabled]');
        if (firstOpt) firstOpt.textContent = '-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü --';
      }
    } else {
      coffeeTreeSelect.disabled = true;
      coffeeTreeSelect.selectedIndex = 0;
      const firstOpt = coffeeTreeSelect.querySelector('option[disabled]');
      if (firstOpt) firstOpt.textContent = '-- ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô --';
    }
  });
});

// =========================
// ÔøΩÔ∏è ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å)
// =========================
document.addEventListener('DOMContentLoaded', () => {
  const coffeeTreeSelect = document.getElementById('coffee_tree');
  const farmerSection = document.getElementById('farmer_section');
  if (!coffeeTreeSelect || !farmerSection) return;

  // ‡∏à‡∏î element ‡∏ó‡∏µ‡πà required ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
  const farmerRequiredEls = Array.from(farmerSection.querySelectorAll('[required]'));
  
  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ required ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
  farmerRequiredEls.forEach(el => {
    el.dataset.wasRequired = 'true';
  });

  function toggleFarmerSection(){
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏° (‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÉ‡∏ô head)
    const hideByDate = shouldHideFarmerSection();
    
    const val = coffeeTreeSelect.value;
    if (hideByDate || (val && val !== '1')) {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏ô
      saveFarmerData();
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 2-6 ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (val && val !== '1') {
        loadFarmerDataFromDatabase().then(success => {
          if (success) {
            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà', val, '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
          } else {
            console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà', val);
          }
        });
      }
      
      // ‡∏ã‡πà‡∏≠‡∏ô + ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô + ‡πÄ‡∏≠‡∏≤ required ‡∏≠‡∏≠‡∏Å
      if (farmerSection.style.display !== 'none') {
        farmerSection.style.display = 'none';
        farmerRequiredEls.forEach(el => {
          if (el.hasAttribute('required')) el.dataset.wasRequired = 'true';
          el.removeAttribute('required');
          el.disabled = true;
        });
      }
    } else {
      // ‡πÅ‡∏™‡∏î‡∏á + ‡∏Ñ‡∏∑‡∏ô required + ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2025 ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1)
      if (farmerSection.style.display === 'none') {
        farmerSection.style.display = '';
        farmerRequiredEls.forEach(el => {
          if (el.dataset.wasRequired) el.setAttribute('required','');
          el.disabled = false;
        });
      }
    }
  }

  coffeeTreeSelect.addEventListener('change', toggleFarmerSection);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const farmerFields = [
    'farmer_name', 'age', 'coffee_experience', 'planting_area', 'address', 
    'gps_coordinates', 'water_system', 'fertilizer_type', 'fertilizer_formula',
    'fertilizer_frequency', 'fertilizer_amount', 'soil_problems', 'yield_problems',
    'internet_access', 'yield_per_tree', 'cupping_experience', 'fertilizer_cost',
    'labor_cost', 'other_costs'
  ];

  farmerFields.forEach(fieldId => {
    const field = document.getElementById(fieldId);
    if (field) {
      field.addEventListener('input', saveFarmerData);
      field.addEventListener('change', saveFarmerData);
    }
  });
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ñ‡πâ‡∏≤‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  if (!shouldHideFarmerSection() || farmerSection.style.display !== 'none') {
    toggleFarmerSection();
  }
});

// =========================
// üîí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Input Number ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
// =========================

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ input number ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
function preventNumberInputScroll() {
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ Global event listener ‡πÅ‡∏ó‡∏ô
  console.log('üîí preventNumberInputScroll: ‡πÉ‡∏ä‡πâ Global event listener ‡πÅ‡∏ó‡∏ô');
}

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Arrow Keys ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ input number
function preventNumberInputArrowKeys() {
  document.addEventListener('keydown', function(e) {
    if (e.target.type === 'number' && (e.key === 'ArrowUp' || e.key === 'ArrowDown')) {
      e.preventDefault();
    }
  });
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', function() {
  preventNumberInputScroll();
  preventNumberInputArrowKeys();
  console.log('üîí Form page: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÅ‡∏•‡∏∞ arrow keys ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input number ‡πÅ‡∏•‡πâ‡∏ß');
});

// =========================
// üß™ Auto Format Fertilizer Formula
// =========================

function setupFertilizerFormatting() {
  const fertilizerInput = document.getElementById('fertilizer_formula');
  if (!fertilizerInput) return;

  let lastValue = '';

  fertilizerInput.addEventListener('input', function(e) {
    let value = e.target.value;
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á cursor
    let cursorPosition = e.target.selectionStart;
    
    // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    let numbersOnly = value.replace(/\D/g, '');
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 6 ‡∏´‡∏•‡∏±‡∏Å
    if (numbersOnly.length > 6) {
      numbersOnly = numbersOnly.substring(0, 6);
    }
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô xx-xx-xx
    let formattedValue = '';
    if (numbersOnly.length > 0) {
      if (numbersOnly.length <= 2) {
        formattedValue = numbersOnly;
      } else if (numbersOnly.length <= 4) {
        formattedValue = numbersOnly.substring(0, 2) + '-' + numbersOnly.substring(2);
      } else {
        formattedValue = numbersOnly.substring(0, 2) + '-' + 
                        numbersOnly.substring(2, 4) + '-' + 
                        numbersOnly.substring(4);
      }
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input
    e.target.value = formattedValue;
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á cursor
    if (formattedValue.length > lastValue.length) {
      // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°
      let newCursorPosition = cursorPosition;
      if (cursorPosition === 3 || cursorPosition === 6) {
        newCursorPosition = cursorPosition + 1;
      }
      e.target.setSelectionRange(newCursorPosition, newCursorPosition);
    }
    
    lastValue = formattedValue;
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ backspace ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
  fertilizerInput.addEventListener('keydown', function(e) {
    if (e.key === 'Backspace') {
      let cursorPosition = e.target.selectionStart;
      let value = e.target.value;
      
      // ‡∏ñ‡πâ‡∏≤ cursor ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á - ‡πÉ‡∏´‡πâ‡∏•‡∏ö - ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
      if (cursorPosition > 0 && value[cursorPosition - 1] === '-') {
        e.preventDefault();
        let newValue = value.substring(0, cursorPosition - 2) + value.substring(cursorPosition);
        e.target.value = newValue;
        e.target.setSelectionRange(cursorPosition - 2, cursorPosition - 2);
        
        // trigger input event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        e.target.dispatchEvent(new Event('input'));
      }
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  const form = document.getElementById('soilForm');
  if (form) {
    form.addEventListener('submit', function(e) {
      const fertilizerValue = fertilizerInput.value;
      const numbersOnly = fertilizerValue.replace(/\D/g, '');
      
      if (fertilizerValue && numbersOnly.length !== 6) {
        e.preventDefault();
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏∏‡πã‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 6 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 15-15-15');
        fertilizerInput.focus();
        return false;
      }
    });
  }
}

document.addEventListener('DOMContentLoaded', setupFertilizerFormatting);
document.addEventListener('DOMContentLoaded', window.refreshFarmerSectionStatus);
document.addEventListener('DOMContentLoaded', window.refreshBeanYieldSectionStatus);
document.addEventListener('DOMContentLoaded', () => initNavbar('form'));

// =========================
// üîí Global Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Input Number
// =========================

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ input[type="number"] ‡πÅ‡∏ö‡∏ö Global
document.addEventListener('wheel', function(e) {
  if (e.target.type === 'number') {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ input ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ
    e.preventDefault();
    
    // ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    window.scrollBy(0, e.deltaY);
  }
}, { passive: false });

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Arrow Keys ‡πÅ‡∏ö‡∏ö Global
document.addEventListener('keydown', function(e) {
  if (e.target.type === 'number' && 
      (e.key === 'ArrowUp' || e.key === 'ArrowDown') &&
      document.activeElement === e.target) {
    e.preventDefault();
  }
});

console.log('üîí Form page: Global protection for input[type="number"] initialized');
